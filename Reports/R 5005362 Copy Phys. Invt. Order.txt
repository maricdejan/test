OBJECT Report 5005362 Copy Phys. Invt. Order
{
  OBJECT-PROPERTIES
  {
    Date=05.11.08;
    Time=12:00:00;
    Version List=NAVDACH6.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Inventurauftrag kopieren;
               ENU=Copy Phys. Invt. Order];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  WITH PhysInvtOrderHeader DO BEGIN
                    TESTFIELD(Status,Status::Open);
                    IF DocNo = '' THEN
                      ERROR(Text1140000);
                    FIND;
                    LOCKTABLE;
                    PhysInvtOrderLine.LOCKTABLE;
                    PhysInvtOrderLine.RESET;
                    PhysInvtOrderLine.SETRANGE("Document No.", PhysInvtOrderHeader."No.");
                    IF PhysInvtOrderLine.FIND('+') THEN
                      NextLineNo := PhysInvtOrderLine."Line No." +10000
                    ELSE
                      NextLineNo := 10000;

                    NoOfInsertedLines := 0;
                    NoOfNoInsertedLines := 0;
                    CASE DocType OF
                      DocType::"Phys. Invt. Order":
                        BEGIN
                          FromPhysInvtOrderHeader.GET(DocNo);
                          IF FromPhysInvtOrderHeader."No." = "No." THEN
                            ERROR(
                              Text1140001,
                              "No.");
                          FromPhysInvtOrderLine.RESET;
                          FromPhysInvtOrderLine.SETRANGE("Document No.", FromPhysInvtOrderHeader."No.");
                          FromPhysInvtOrderLine.CLEARMARKS;
                          IF FromPhysInvtOrderLine.FIND('-') THEN REPEAT
                            IF FromPhysInvtOrderLine."Item No." <> '' THEN BEGIN
                              NoOfOrderLines :=
                                GetSamePhysInvtOrderLine(
                                  FromPhysInvtOrderLine."Item No.", FromPhysInvtOrderLine."Variant Code",
                                  FromPhysInvtOrderLine."Location Code", FromPhysInvtOrderLine."Bin Code",
                                  ErrorText,
                                  PhysInvtOrderLine2);
                              IF NoOfOrderLines = 0 THEN BEGIN
                                InsertNewLine(
                                  FromPhysInvtOrderLine."Item No.", FromPhysInvtOrderLine."Variant Code",
                                  FromPhysInvtOrderLine."Location Code", FromPhysInvtOrderLine."Bin Code");
                                NoOfInsertedLines := NoOfInsertedLines +1;
                              END ELSE BEGIN
                                FromPhysInvtOrderLine.MARK(TRUE);
                                NoOfNoInsertedLines := NoOfNoInsertedLines +1;
                              END;
                            END;
                          UNTIL FromPhysInvtOrderLine.NEXT = 0;
                        END;
                      DocType::"Posted Phys. Invt. Order":
                        BEGIN
                          FromPostedPhysInvtOrderHeader.GET(DocNo);
                          FromPostedPhysInvtOrderLine.RESET;
                          FromPostedPhysInvtOrderLine.SETRANGE("Document No.", FromPostedPhysInvtOrderHeader."No.");
                          FromPostedPhysInvtOrderLine.CLEARMARKS;
                          IF FromPostedPhysInvtOrderLine.FIND('-') THEN REPEAT
                            IF FromPostedPhysInvtOrderLine."Item No." <> '' THEN BEGIN
                              NoOfOrderLines :=
                                GetSamePhysInvtOrderLine(
                                  FromPostedPhysInvtOrderLine."Item No.", FromPostedPhysInvtOrderLine."Variant Code",
                                  FromPostedPhysInvtOrderLine."Location Code", FromPostedPhysInvtOrderLine."Bin Code",
                                  ErrorText,
                                  PhysInvtOrderLine2);
                              IF NoOfOrderLines = 0 THEN BEGIN
                                InsertNewLine(
                                  FromPostedPhysInvtOrderLine."Item No.", FromPostedPhysInvtOrderLine."Variant Code",
                                  FromPostedPhysInvtOrderLine."Location Code", FromPostedPhysInvtOrderLine."Bin Code");
                                NoOfInsertedLines := NoOfInsertedLines +1;
                              END ELSE BEGIN
                                FromPostedPhysInvtOrderLine.MARK(TRUE);
                                NoOfNoInsertedLines := NoOfNoInsertedLines +1;
                              END;
                            END;
                          UNTIL FromPostedPhysInvtOrderLine.NEXT = 0;
                        END;
                    END;
                  END;

                  COMMIT;

                  IF NoOfNoInsertedLines = 0 THEN
                    MESSAGE(
                      STRSUBSTNO(
                        Text1140002, NoOfInsertedLines, PhysInvtOrderHeader."No."))
                  ELSE
                    MESSAGE(
                      STRSUBSTNO(
                        Text1140002, NoOfInsertedLines, PhysInvtOrderHeader."No.") + '\' +
                      STRSUBSTNO(
                        Text1140003, NoOfNoInsertedLines, PhysInvtOrderHeader."No."));
                END;

  }
  DATAITEMS
  {
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6160;
      Height=1650;
    }
    CONTROLS
    {
      { 1   ;TextBox      ;3410 ;0    ;2750 ;440  ;CaptionML=[DEU=Belegart;
                                                              ENU=Document Type];
                                                   OptionCaptionML=[DEU="Inventurauftrag,Geb. Inventurauftrag ";
                                                                    ENU="Phys. Invt. Order,Posted Phys. Invt. Order "];
                                                   SourceExpr=DocType;
                                                   OnValidate=BEGIN
                                                                DocNo := '';
                                                                ValidateDocNo;
                                                              END;
                                                               }
      { 2   ;TextBox      ;3410 ;550  ;2750 ;440  ;Lookup=Yes;
                                                   CaptionML=[DEU=Belegnr.;
                                                              ENU=Document No.];
                                                   SourceExpr=DocNo;
                                                   OnValidate=BEGIN
                                                                ValidateDocNo;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupDocNo;
                                                            END;
                                                             }
      { 3   ;Label        ;0    ;0    ;3300 ;440  ;ParentControl=1 }
      { 4   ;Label        ;0    ;550  ;3300 ;440  ;ParentControl=2 }
      { 5   ;CheckBox     ;3410 ;1210 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Erw. Menge berechnen;
                                                              ENU=Calculate Qty. Expected];
                                                   SourceExpr=CalcQtyExpected }
      { 6   ;Label        ;0    ;1210 ;3300 ;440  ;ParentControl=5 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Belegart;
                             ENU=Document Type];
                  OptionCaptionML=[DEU="Inventurauftrag,Geb. Inventurauftrag ";
                                   ENU="Phys. Invt. Order,Posted Phys. Invt. Order "];
                  SourceExpr=DocType;
                  OnValidate=BEGIN
                               DocNo := '';
                               ValidateDocNo;
                             END;
                              }

      { 2   ;2   ;Field     ;
                  Lookup=Yes;
                  CaptionML=[DEU=Belegnr.;
                             ENU=Document No.];
                  SourceExpr=DocNo;
                  OnValidate=BEGIN
                               ValidateDocNo;
                             END;

                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  CaptionML=[DEU=Erwartete Menge berechnen;
                             ENU=Calculate Qty. Expected];
                  SourceExpr=CalcQtyExpected }

    }
  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'DEU=Bitte geben Sie eine Belegnr. ein.;ENU=Please enter a Document No.';
      Text1140001@1140001 : TextConst 'DEU=Auftrag %1 kann nicht auf sich selbst kopiert werden.;ENU=Order %1 cannot be copied onto itself.';
      Text1140002@1140002 : TextConst 'DEU=%1 Zeilen wurden in den Auftrag %2 eingefÅgt.;ENU=%1 lines inserted into the order %2 .';
      Text1140003@1140003 : TextConst 'DEU=%1 Zeilen wurden nicht in den Auftrag %2 eingefÅgt, um Dopplungen zu vermeiden.;ENU=%1 lines could not  inserted into the order %2, to avoid duplicates.';
      PhysInvtOrderHeader@1140004 : Record 5005350;
      PhysInvtOrderLine@1140005 : Record 5005351;
      PhysInvtOrderLine2@1140006 : Record 5005351;
      FromPhysInvtOrderHeader@1140007 : Record 5005350;
      FromPhysInvtOrderLine@1140008 : Record 5005351;
      FromPostedPhysInvtOrderHeader@1140009 : Record 5005354;
      FromPostedPhysInvtOrderLine@1140010 : Record 5005355;
      ErrorText@1140011 : Text[250];
      DocNo@1140012 : Code[20];
      NoOfOrderLines@1140013 : Integer;
      NextLineNo@1140014 : Integer;
      NoOfInsertedLines@1140015 : Integer;
      NoOfNoInsertedLines@1140016 : Integer;
      DocType@1140017 : 'Phys. Invt. Order,Posted Phys. Invt. Order';
      CalcQtyExpected@1140018 : Boolean;

    PROCEDURE SetPhysInvtOrderHeader@1140000(VAR NewPhysInvtOrderHeader@1140000 : Record 5005350);
    BEGIN
      PhysInvtOrderHeader := NewPhysInvtOrderHeader;
    END;

    LOCAL PROCEDURE ValidateDocNo@1140001();
    BEGIN
      IF DocNo = '' THEN
        FromPhysInvtOrderHeader.INIT
      ELSE
        IF FromPhysInvtOrderHeader."No." = '' THEN BEGIN
          FromPhysInvtOrderHeader.INIT;
          CASE DocType OF
            DocType::"Phys. Invt. Order":
              FromPhysInvtOrderHeader.GET(DocNo);
            DocType::"Posted Phys. Invt. Order":
              BEGIN
                FromPostedPhysInvtOrderHeader.GET(DocNo);
                FromPhysInvtOrderHeader.TRANSFERFIELDS(FromPostedPhysInvtOrderHeader);
              END;
          END;
        END;
      FromPhysInvtOrderHeader."No." := '';
    END;

    LOCAL PROCEDURE LookupDocNo@1140002();
    BEGIN
      CASE DocType OF
        DocType::"Phys. Invt. Order":
          BEGIN
            FromPhysInvtOrderHeader.SETFILTER("No.",'<>%1',PhysInvtOrderHeader."No.");
            FromPhysInvtOrderHeader."No." := DocNo;
            IF FromPhysInvtOrderHeader.FIND('=><') THEN;
            IF FORM.RUNMODAL(0,FromPhysInvtOrderHeader) = ACTION::LookupOK THEN
              DocNo := FromPhysInvtOrderHeader."No.";
          END;
        DocType::"Posted Phys. Invt. Order":
          BEGIN
            FromPostedPhysInvtOrderHeader."No." := DocNo;
            IF FromPostedPhysInvtOrderHeader.FIND('=><') THEN;
            IF FORM.RUNMODAL(0,FromPostedPhysInvtOrderHeader) = ACTION::LookupOK THEN
              DocNo := FromPostedPhysInvtOrderHeader."No.";
          END;
      END;
      ValidateDocNo;
    END;

    PROCEDURE InsertNewLine@1140003(ItemNo@1140000 : Code[20];VariantCode@1140001 : Code[10];LocationCode@1140002 : Code[10];BinCode@1140003 : Code[10]);
    BEGIN
      PhysInvtOrderLine.INIT;
      PhysInvtOrderLine."Document No." := PhysInvtOrderHeader."No.";
      PhysInvtOrderLine."Line No." := NextLineNo;
      PhysInvtOrderLine.VALIDATE("Item No.", ItemNo);
      PhysInvtOrderLine.VALIDATE("Variant Code", VariantCode);
      PhysInvtOrderLine.VALIDATE("Location Code", LocationCode);
      PhysInvtOrderLine.VALIDATE("Bin Code", BinCode);
      PhysInvtOrderLine.INSERT(TRUE);
      PhysInvtOrderLine.CreateDim(DATABASE::Item, PhysInvtOrderLine."Item No.");
      IF CalcQtyExpected THEN
        PhysInvtOrderLine.CalcQtyAndTrackLinesExpected;
      PhysInvtOrderLine.MODIFY;
      NextLineNo := NextLineNo + 10000;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}


OBJECT Report 5005365 Calc. Phys. Order Lines (Bins)
{
  OBJECT-PROPERTIES
  {
    Date=05.11.08;
    Time=12:00:00;
    Version List=NAVDACH6.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Inventurauftragszeilen (Lagerpl.) berech.;
               ENU=Calc. Phys. Order Lines (Bins)];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table7354;
        DataItemTableView=SORTING(Location Code,Code);
        OnPreDataItem=BEGIN
                        PhysInvtOrderHeader.TESTFIELD("No.");
                        PhysInvtOrderHeader.TESTFIELD(Status, PhysInvtOrderHeader.Status::Open);

                        PhysInvtOrderHeader.LOCKTABLE;
                        PhysInvtOrderLine.LOCKTABLE;

                        PhysInvtOrderLine.RESET;
                        PhysInvtOrderLine.SETRANGE("Document No.", PhysInvtOrderHeader."No.");
                        IF PhysInvtOrderLine.FIND('+') THEN
                          NextLineNo := PhysInvtOrderLine."Line No." + 10000
                        ELSE
                          NextLineNo := 10000;

                        IF NOT HideValidationDialog THEN
                          Window.OPEN(
                            Text1140000 +
                            Text1140001);

                        LineCount := 0;
                        ItemsBlocked := FALSE;
                      END;

        OnAfterGetRecord=VAR
                           Item@1140000 : Record 27;
                         BEGIN
                           Location.GET("Location Code");
                           Location.TESTFIELD("Bin Mandatory");

                           IF NOT HideValidationDialog THEN BEGIN
                             Window.UPDATE(1, "Location Code");
                             Window.UPDATE(2, Code);
                           END;

                           LastLocationCode := '';
                           LastBinCode := '';
                           LastItemNo := '';
                           LastVariantCode := '';

                           WhseEntry.RESET;
                           WhseEntry.SETCURRENTKEY("Location Code", "Bin Code", "Item No.", "Variant Code");
                           WhseEntry.SETRANGE("Location Code", "Location Code");
                           WhseEntry.SETRANGE("Bin Code", Code);
                           IF WhseEntry.FIND('-') THEN REPEAT
                             IF Item.GET(WhseEntry."Item No.") THEN BEGIN
                               IF Item.Blocked = FALSE THEN BEGIN
                                 IF (LastLocationCode <> WhseEntry."Location Code") OR
                                    (LastBinCode <> WhseEntry."Bin Code") OR
                                    (LastItemNo <> WhseEntry."Item No.") OR
                                    (LastVariantCode <> WhseEntry."Variant Code")
                                 THEN BEGIN
                                   LastLocationCode := WhseEntry."Location Code";
                                   LastBinCode := WhseEntry."Bin Code";
                                   LastItemNo := WhseEntry."Item No.";
                                   LastVariantCode := WhseEntry."Variant Code";
                                   IF PhysInvtOrderHeader.GetSamePhysInvtOrderLine(
                                     WhseEntry."Item No.", WhseEntry."Variant Code",
                                     WhseEntry."Location Code",
                                     WhseEntry."Bin Code",
                                     ErrorText,
                                     PhysInvtOrderLine) = 0
                                   THEN BEGIN
                                     CreateNewPhysInvtOrderLine();
                                   END;
                                 END;
                               END ELSE
                                 ItemsBlocked := TRUE;
                             END;
                           UNTIL WhseEntry.NEXT = 0;
                         END;

        OnPostDataItem=BEGIN
                         IF NOT HideValidationDialog THEN BEGIN
                           Window.CLOSE;
                           IF ItemsBlocked THEN
                             MESSAGE(Text1140003);
                           MESSAGE(
                             STRSUBSTNO(Text1140002, LineCount));
                         END;
                       END;

        ReqFilterFields=Location Code,Code;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=3850;
      Height=990;
    }
    CONTROLS
    {
      { 1140000;CheckBox  ;3410 ;0    ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Erw. Menge berechnen;
                                                              ENU=Calculate Qty. Expected];
                                                   SourceExpr=CalcQtyExpected }
      { 1140001;CheckBox  ;3410 ;550  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Artikel nicht auf Lager;
                                                              ENU=Items Not on Inventory];
                                                   SourceExpr=ZeroQty }
      { 1140002;Label     ;0    ;550  ;3300 ;440  ;ParentControl=1140001 }
      { 1140003;Label     ;0    ;0    ;3300 ;440  ;ParentControl=1140000 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options] }

      { 1140000;2;Field     ;
                  CaptionML=[DEU=Erwartete Menge berechnen;
                             ENU=Calculate Qty. Expected];
                  SourceExpr=CalcQtyExpected }

      { 1140001;2;Field     ;
                  CaptionML=[DEU=Artikel nicht auf Lager;
                             ENU=Items Not on Inventory];
                  SourceExpr=ZeroQty }

    }
  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'DEU=Berechne die Auftragszeilen...\\;ENU=Calculating the order lines...\\';
      Text1140001@1140001 : TextConst 'DEU=Lagerort #1########   Lagerfach #2#############;ENU=Location #1########   Bin #2############';
      Text1140002@1140002 : TextConst 'DEU=%1 neue Zeilen wurden erstellt.;ENU=%1 new lines have been created.';
      Text1140003@1140020 : TextConst 'DEU=Mindestens ein gesperrter Artikel wurde Åbersprungen.;ENU=There is at least one blocked item that was skipped.';
      PhysInvtOrderHeader@1140003 : Record 5005350;
      PhysInvtOrderLine@1140004 : Record 5005351;
      Location@1140005 : Record 14;
      WhseEntry@1140006 : Record 7312;
      Window@1140007 : Dialog;
      ErrorText@1140008 : Text[250];
      LastItemNo@1140009 : Code[20];
      LastVariantCode@1140010 : Code[10];
      LastLocationCode@1140011 : Code[10];
      LastBinCode@1140012 : Code[20];
      QtyExp@1140013 : Decimal;
      LastItemLedgEntryNo@1140014 : Integer;
      NextLineNo@1140015 : Integer;
      LineCount@1140016 : Integer;
      HideValidationDialog@1140017 : Boolean;
      ZeroQty@1140018 : Boolean;
      CalcQtyExpected@1140019 : Boolean;
      ItemsBlocked@1140021 : Boolean;

    PROCEDURE SetPhysInvtOrderHeader@1140000(NewPhysInvtOrderHeader@1140000 : Record 5005350);
    BEGIN
      PhysInvtOrderHeader := NewPhysInvtOrderHeader;
    END;

    PROCEDURE SetHideValidationDialog@1140001(NewHideValidationDialog@1140000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE CreateNewPhysInvtOrderLine@1140002();
    BEGIN
      PhysInvtOrderLine.INIT;
      PhysInvtOrderLine."Document No." := PhysInvtOrderHeader."No.";
      PhysInvtOrderLine."Line No." := NextLineNo;
      PhysInvtOrderLine.VALIDATE("Item No.", WhseEntry."Item No.");
      PhysInvtOrderLine.VALIDATE("Variant Code", WhseEntry."Variant Code");
      PhysInvtOrderLine.VALIDATE("Location Code", WhseEntry."Location Code");
      PhysInvtOrderLine.VALIDATE("Bin Code", WhseEntry."Bin Code");

      PhysInvtOrderLine."Phys Invt Counting Period Code" := '';
      PhysInvtOrderLine."Phys Invt Counting Period Type" := 0;

      PhysInvtOrderLine.CalcQtyAndLastItemLedgExpected(
        QtyExp, LastItemLedgEntryNo);
      PhysInvtOrderLine."Recorded without Order" := FALSE;
      IF (QtyExp <> 0) OR ZeroQty THEN BEGIN
        PhysInvtOrderLine.INSERT(TRUE);
        PhysInvtOrderLine.CreateDim(DATABASE::Item, PhysInvtOrderLine."Item No.");
        IF CalcQtyExpected THEN
          PhysInvtOrderLine.CalcQtyAndTrackLinesExpected;
        PhysInvtOrderLine.MODIFY;
        NextLineNo := NextLineNo + 10000;
        LineCount := LineCount +1;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}


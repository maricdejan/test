OBJECT Report 11110 VAT Statement AT
{
  OBJECT-PROPERTIES
  {
    Date=14.08.09;
    Time=12:00:00;
    Version List=NAVDACH6.00.01;
  }
  PROPERTIES
  {
    CaptionML=[DEU=MwSt.-Abrechnung AT;
               ENU=VAT Statement AT];
    TopMargin=1800;
    LeftMargin=2500;
    RightMargin=0;
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  RBMgt@1160000 : Codeunit 419;
                BEGIN
                  Companyinfo.GET;
                  IF ISSERVICETIER THEN BEGIN
                    FDFFileName := RBMgt.EnvironFileName('','fdf');
                    XMLFileName := RBMgt.EnvironFileName('','xml');
                  END;
                END;

    OnPostReport=VAR
                   ToFDFFile@1160000 : Text[1024];
                   ToXMLFile@1160001 : Text[1024];
                 BEGIN
                   IF ISSERVICETIER THEN BEGIN
                     ToFDFFile := Text1160063 + '.fdf';
                     DOWNLOAD(FDFFileName,Text1160054,'',Text1160055,ToFDFFile);
                     ToXMLFile := Text1160063 + '.xml';
                     DOWNLOAD(XMLFileName,Text1160056,'',Text1160057,ToXMLFile);
                   END ELSE
                     ToFDFFile := FDFFileName;
                   IF CONFIRM(Text1160060,TRUE,ToFDFFile) THEN
                     HYPERLINK(ToFDFFile);
                 END;

    HorzGrid=25;
    VertGrid=25;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table257;
        DataItemTableView=SORTING(Statement Template Name,Name);
        OnPreDataItem=BEGIN
                        loop := 0;
                      END;

        OnAfterGetRecord=BEGIN
                           IF PDFFileName = '' THEN
                             ERROR(Text1160058);
                           IF FDFFileName = '' THEN
                             ERROR(Text1160059);
                           loop := loop + 1;
                         END;

        OnPostDataItem=BEGIN
                         CreateFDFFile;
                         IF XMLFileName = '' THEN
                           MESSAGE(Text1160005)
                         ELSE
                           CreateXMLFile;
                         IF loop > 1 THEN
                           MESSAGE(Text1160062,"VAT Statement Name".FIELDCAPTION("Statement Template Name"),"VAT Statement Name".FIELDCAPTION(Name));
                       END;

        ReqFilterFields=Statement Template Name,Name;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table256;
        DataItemTableView=SORTING(Statement Template Name,Statement Name,Line No.);
        OnPreDataItem=BEGIN
                        SETRANGE("Date Filter",Startingdate,Endingdate);
                        IF GETRANGEMIN("Date Filter") = 0D THEN
                          FIELDERROR("Date Filter");

                        IF "Date Filter" = 0D THEN
                          "Date Filter" := WORKDATE;
                        CASE PeriodType OF
                          PeriodType::quarter:
                            BEGIN
                              FromDate := GETRANGEMIN("Date Filter");
                              FromDate := CALCDATE('<-CQ>',FromDate);
                              ToDate := CALCDATE('<+CQ>',FromDate);
                            END;
                          PeriodType::month:
                            BEGIN
                              FromDate := GETRANGEMIN("Date Filter");
                              FromDate := CALCDATE('<-CM>',FromDate);
                              ToDate := CALCDATE('<+CM>',FromDate);
                            END;
                          PeriodType::"defined period":
                            BEGIN
                              FromDate := GETRANGEMIN("Date Filter");
                              ToDate := GETRANGEMAX("Date Filter");
                            END;

                        END;
                        "VAT Statement Line".SETRANGE("Date Filter",FromDate,ToDate);
                      END;

        OnAfterGetRecord=BEGIN
                           IF "VAT Statement Line".Print THEN
                             CalcLineTotal("VAT Statement Line",TotalAmount,0);
                         END;

        OnPostDataItem=BEGIN
                         //Handling of negative amounts regarding
                         //http://www.bmf.gv.at/steuern/Aktuelles/UVA_Entgeltsberichtigung.htm
                         FOR i := 1 TO 99 DO BEGIN
                           IF i IN [22,29,25,35,52,38] THEN BEGIN
                             IF Position[i] < 0 THEN BEGIN
                               Position[1000] := Position[1000] - Position[i];
                               Position[i] := 0;
                               Position[1090] := Position[1090] + Position[i + 1000];
                               Position[i + 1000] := 0;
                             END;
                           END;
                           IF i IN [72,73,88] THEN BEGIN
                             IF Position[i] < 0 THEN BEGIN
                               Position[70] := Position[70] - Position[i];
                               Position[i] := 0;
                               Position[1090] := Position[1090] + Position[i + 1000];
                               Position[i + 1000] := 0;
                             END;
                           END;
                         END;
                         IF Position[70] < 0 THEN
                           Position[70] := 0;
                         IF Position[71] < 0 THEN
                           Position[71] := 0;

                         FOR i := 1000 TO 1099 DO BEGIN
                           IF i IN [1011,1012,1015,1017,1018,1019,1016,1020,1021] THEN
                             IF Position[i] < 0 THEN BEGIN
                               Position[1000] := Position[1000] - Position[i];
                               Position[i] := 0;
                             END;
                           IF i IN [1060,1061,1083,1065,1066,1082,1087,1064,1062,1063,1089] THEN
                             IF Position[i] < 0 THEN BEGIN
                               Position[1067] := Position[1067] - Position[i];
                               Position[i] := 0;
                             END;
                           IF i IN [1048,1057,1056,1044,1032] THEN
                             IF Position[i] < 0 THEN BEGIN
                               Position[1090] := Position[1090] + Position[i];
                               Position[i] := 0;
                             END;
                         END;


                         IF CheckPositions THEN
                           CheckPositionnumbers;
                       END;

        DataItemLink=Statement Template Name=FIELD(Statement Template Name),
                     Statement Name=FIELD(Name);
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8360;
      Height=10120;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   CLEAR(NumberPar6Abs1);

                   IF (Startingdate <> 0D) AND (Endingdate <> 0D) THEN BEGIN
                     IF (Startingdate = CALCDATE('<-CQ>',Startingdate)) AND (Endingdate = CALCDATE('<+CQ>',Startingdate)) THEN
                       PeriodType := PeriodType::quarter
                     ELSE IF (Startingdate = CALCDATE('<-CM>',Startingdate)) AND (Endingdate = CALCDATE('<+CM>',Startingdate)) THEN
                       PeriodType := PeriodType::month
                     ELSE
                       PeriodType := PeriodType::"defined period";
                   END ELSE
                     PeriodType := PeriodType::"defined period";

                   RequestOptionsForm.FDFFilenameControl.VISIBLE := NOT ISSERVICETIER;
                   RequestOptionsForm.XMLFilenameControl.VISIBLE := NOT ISSERVICETIER;
                 END;

    }
    CONTROLS
    {
      { 1   ;CheckBox     ;3410 ;6160 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Auf ganze Zahlen runden;
                                                              ENU=Round to Whole Numbers];
                                                   SourceExpr=PrintInWholeNumbers }
      { 2   ;Label        ;0    ;6160 ;3300 ;440  ;ParentControl=1 }
      { 3   ;OptionButton ;3410 ;3410 ;4950 ;440  ;CaptionML=[DEU=Vor und innerhalb Periode;
                                                              ENU=Before and Within Period];
                                                   SourceExpr=PeriodSelection;
                                                   OptionValue=Before and Within Period }
      { 4   ;OptionButton ;3410 ;2860 ;4950 ;440  ;CaptionML=[DEU=Innerhalb Periode;
                                                              ENU=Within Period];
                                                   SourceExpr=PeriodSelection;
                                                   OptionValue=Within Period }
      { 5   ;Label        ;0    ;2860 ;3300 ;440  ;ParentControl=4;
                                                   CaptionML=[DEU=MwSt.-Posten einschlieáen;
                                                              ENU=Include VAT Entries] }
      { 6   ;OptionButton ;3410 ;2200 ;4950 ;440  ;CaptionML=[DEU=Offen und geschlossen;
                                                              ENU=Open and Closed];
                                                   SourceExpr=Selection;
                                                   OptionValue=Open and Closed }
      { 7   ;OptionButton ;3410 ;1650 ;4950 ;440  ;CaptionML=[DEU=Geschlossen;
                                                              ENU=Closed];
                                                   SourceExpr=Selection;
                                                   OptionValue=Closed }
      { 8   ;OptionButton ;3410 ;1100 ;4950 ;440  ;CaptionML=[DEU=Offen;
                                                              ENU=Open];
                                                   SourceExpr=Selection;
                                                   OptionValue=Open }
      { 9   ;Label        ;0    ;1100 ;3300 ;440  ;ParentControl=8;
                                                   CaptionML=[DEU=MwSt.-Posten einschlieáen;
                                                              ENU=Include VAT Entries] }
      { 10  ;OptionButton ;3410 ;4510 ;4950 ;440  ;CaptionML=[DEU=Monat;
                                                              ENU=Month];
                                                   SourceExpr=PeriodType;
                                                   OptionValue=month;
                                                   OnValidate=BEGIN
                                                                IF Startingdate <> 0D THEN
                                                                  IF (Startingdate <> CALCDATE('<-CM>',Startingdate)) OR (Endingdate <> CALCDATE('<+CM>',Startingdate)) THEN
                                                                    IF CONFIRM(Text1160061, TRUE) THEN BEGIN
                                                                      Startingdate := CALCDATE('<-CM>',Startingdate);
                                                                      Endingdate := CALCDATE('<+CM>',Startingdate);
                                                                    END ELSE
                                                                      ERROR('');
                                                              END;
                                                               }
      { 11  ;OptionButton ;3410 ;3960 ;4950 ;440  ;CaptionML=[DEU=Quartal;
                                                              ENU=Quarter];
                                                   SourceExpr=PeriodType;
                                                   OptionValue=quarter;
                                                   OnValidate=BEGIN
                                                                IF Startingdate <> 0D THEN
                                                                  IF (Startingdate <> CALCDATE('<-CQ>',Startingdate)) OR (Endingdate <> CALCDATE('<+CQ>',Startingdate)) THEN
                                                                    IF CONFIRM(Text1160061, TRUE) THEN BEGIN
                                                                      Startingdate := CALCDATE('<-CQ>',Startingdate);
                                                                      Endingdate := CALCDATE('<+CQ>',Startingdate);
                                                                    END ELSE
                                                                      ERROR('');
                                                              END;
                                                               }
      { 12  ;Label        ;0    ;3960 ;3300 ;440  ;ParentControl=11;
                                                   CaptionML=[DEU=Berichtstyp;
                                                              ENU=Reporting Type] }
      { 23  ;OptionButton ;3410 ;5060 ;4950 ;440  ;CaptionML=[DEU=Definierte Periode;
                                                              ENU=Defined period];
                                                   SourceExpr=PeriodType;
                                                   OptionValue=defined period }
      { 1160001;TextBox   ;3410 ;7920 ;4950 ;440  ;Name=XMLFilenameControl;
                                                   CaptionML=[DEU=XML-Dateiname;
                                                              ENU=XML File Name];
                                                   SourceExpr=XMLFileName;
                                                   OnAssistEdit=BEGIN
                                                                  XMLFileName := CommonDlgMgt.OpenFile(Text1160056,XMLFileName,4,Text1160057,1);
                                                                END;
                                                                 }
      { 1160002;Label     ;0    ;7920 ;3300 ;440  ;ParentControl=1160001 }
      { 1160003;CheckBox  ;3410 ;8580 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Fr Zahlung von Verbindlichkeiten genutzter berschuss;
                                                              ENU=Surplus Used to Pay Dues];
                                                   SourceExpr=UseARE }
      { 1160004;Label     ;0    ;8580 ;3300 ;440  ;ParentControl=1160003 }
      { 1160005;CheckBox  ;3410 ;9130 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Weitere per Post geschickte Rechnungen;
                                                              ENU=Additional Invoices sent via Mail];
                                                   SourceExpr=UseREPO }
      { 1160006;Label     ;0    ;9130 ;3300 ;440  ;ParentControl=1160005 }
      { 1160007;CheckBox  ;3410 ;5610 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[DEU=Positionen prfen;
                                                              ENU=Check Positions];
                                                   SourceExpr=CheckPositions }
      { 1160008;Label     ;0    ;5610 ;3300 ;440  ;ParentControl=1160007 }
      { 1160000;TextBox   ;3410 ;9680 ;1700 ;440  ;CaptionML=[DEU=Nummer õ 6 Abs. 1;
                                                              ENU=Number õ6 Abs. 1];
                                                   Numeric=Yes;
                                                   BlankZero=Yes;
                                                   SourceExpr=NumberPar6Abs1;
                                                   MinValue=0;
                                                   MaxValue=99 }
      { 1160009;Label     ;0    ;9680 ;3300 ;440  ;ParentControl=1160000 }
      { 1160010;TextBox   ;3410 ;0    ;1650 ;440  ;CaptionML=[DEU=Startdatum;
                                                              ENU=Starting Date];
                                                   SourceExpr=Startingdate;
                                                   OnValidate=VAR
                                                                RefDate@1160000 : Date;
                                                              BEGIN
                                                                CLEAR(RefDate);
                                                                IF Startingdate <> 0D THEN
                                                                  RefDate := Startingdate
                                                                ELSE IF Endingdate <> 0D THEN
                                                                  RefDate := Endingdate;
                                                                IF RefDate <> 0D THEN BEGIN
                                                                  IF PeriodType = PeriodType::quarter THEN BEGIN
                                                                    Startingdate := CALCDATE('<-CQ>',RefDate);
                                                                    Endingdate := CALCDATE('<+CQ>',RefDate);
                                                                  END ELSE IF PeriodType = PeriodType::month THEN BEGIN
                                                                    Startingdate := CALCDATE('<-CM>',RefDate);
                                                                    Endingdate := CALCDATE('<+CM>',RefDate);
                                                                  END ELSE BEGIN
                                                                    IF Endingdate = 0D THEN
                                                                      Endingdate := RefDate;
                                                                    IF Startingdate = 0D THEN
                                                                      Startingdate := RefDate;
                                                                  END;
                                                                END;
                                                              END;
                                                               }
      { 1160011;Label     ;0    ;0    ;3300 ;440  ;ParentControl=1160010 }
      { 1160012;TextBox   ;3410 ;550  ;1650 ;440  ;CaptionML=[DEU=Enddatum;
                                                              ENU=Ending Date];
                                                   SourceExpr=Endingdate;
                                                   OnValidate=VAR
                                                                RefDate@1160000 : Date;
                                                              BEGIN
                                                                CLEAR(RefDate);
                                                                IF Endingdate <> 0D THEN
                                                                  RefDate := Endingdate
                                                                ELSE IF Startingdate <> 0D THEN
                                                                  RefDate := Startingdate;
                                                                IF RefDate <> 0D THEN BEGIN
                                                                  IF PeriodType = PeriodType::quarter THEN BEGIN
                                                                    Startingdate := CALCDATE('<-CQ>',RefDate);
                                                                    Endingdate := CALCDATE('<+CQ>',RefDate);
                                                                  END ELSE IF PeriodType = PeriodType::month THEN BEGIN
                                                                    Startingdate := CALCDATE('<-CM>',RefDate);
                                                                    Endingdate := CALCDATE('<+CM>',RefDate);
                                                                  END ELSE BEGIN
                                                                    IF Startingdate = 0D THEN
                                                                      Startingdate := RefDate;
                                                                    IF Endingdate = 0D THEN
                                                                      Endingdate := RefDate;
                                                                  END;
                                                                END;
                                                              END;
                                                               }
      { 1160013;Label     ;0    ;550  ;3300 ;440  ;ParentControl=1160012 }
      { 1160014;Label     ;0    ;6820 ;3300 ;440  ;ParentControl=1160015 }
      { 1160015;TextBox   ;3410 ;6820 ;4950 ;440  ;Name=PDFFilenameControl;
                                                   CaptionML=[DEU=PDF-Dateiname;
                                                              ENU=PDF File Name];
                                                   SourceExpr=PDFFileName;
                                                   OnAssistEdit=BEGIN
                                                                  PDFFileName := CommonDlgMgt.OpenFile(Text1160052,PDFFileName,4,Text1160053,0);
                                                                END;
                                                                 }
      { 1160016;Label     ;0    ;7370 ;3300 ;440  ;ParentControl=1160017 }
      { 1160017;TextBox   ;3410 ;7370 ;4950 ;440  ;Name=FDFFilenameControl;
                                                   CaptionML=[DEU=FDF-Dateiname;
                                                              ENU=FDF File Name];
                                                   SourceExpr=FDFFileName;
                                                   OnAssistEdit=BEGIN
                                                                  FDFFileName := CommonDlgMgt.OpenFile(Text1160054,FDFFileName,4,Text1160055,1);
                                                                END;
                                                                 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               XMLFilenameControlVisible := TRUE;
               FDFFilenameControlVisible := TRUE;
             END;

      OnOpenPage=BEGIN
                   CLEAR(NumberPar6Abs1);

                   IF (Startingdate <> 0D) AND (Endingdate <> 0D) THEN BEGIN
                     IF (Startingdate = CALCDATE('<-CQ>',Startingdate)) AND (Endingdate = CALCDATE('<+CQ>',Startingdate)) THEN
                       PeriodType := PeriodType::quarter
                     ELSE IF (Startingdate = CALCDATE('<-CM>',Startingdate)) AND (Endingdate = CALCDATE('<+CM>',Startingdate)) THEN
                       PeriodType := PeriodType::month
                     ELSE
                       PeriodType := PeriodType::"defined period";
                   END ELSE
                     PeriodType := PeriodType::"defined period";

                   FDFFilenameControlVisible := NOT ISSERVICETIER;
                   XMLFilenameControlVisible := NOT ISSERVICETIER;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DEU=Optionen;
                             ENU=Options] }

      { 1160010;2;Field     ;
                  CaptionML=[DEU=Startdatum;
                             ENU=Starting Date];
                  SourceExpr=Startingdate;
                  OnValidate=VAR
                               RefDate@1160000 : Date;
                             BEGIN
                               CLEAR(RefDate);
                               IF Startingdate <> 0D THEN
                                 RefDate := Startingdate
                               ELSE IF Endingdate <> 0D THEN
                                 RefDate := Endingdate;
                               IF RefDate <> 0D THEN BEGIN
                                 IF PeriodType = PeriodType::quarter THEN BEGIN
                                   Startingdate := CALCDATE('<-CQ>',RefDate);
                                   Endingdate := CALCDATE('<+CQ>',RefDate);
                                 END ELSE IF PeriodType = PeriodType::month THEN BEGIN
                                   Startingdate := CALCDATE('<-CM>',RefDate);
                                   Endingdate := CALCDATE('<+CM>',RefDate);
                                 END ELSE BEGIN
                                   IF Endingdate = 0D THEN
                                     Endingdate := RefDate;
                                   IF Startingdate = 0D THEN
                                     Startingdate := RefDate;
                                 END;
                               END;
                             END;
                              }

      { 1160012;2;Field     ;
                  CaptionML=[DEU=Enddatum;
                             ENU=Ending Date];
                  SourceExpr=Endingdate;
                  OnValidate=VAR
                               RefDate@1160000 : Date;
                             BEGIN
                               CLEAR(RefDate);
                               IF Endingdate <> 0D THEN
                                 RefDate := Endingdate
                               ELSE IF Startingdate <> 0D THEN
                                 RefDate := Startingdate;
                               IF RefDate <> 0D THEN BEGIN
                                 IF PeriodType = PeriodType::quarter THEN BEGIN
                                   Startingdate := CALCDATE('<-CQ>',RefDate);
                                   Endingdate := CALCDATE('<+CQ>',RefDate);
                                 END ELSE IF PeriodType = PeriodType::month THEN BEGIN
                                   Startingdate := CALCDATE('<-CM>',RefDate);
                                   Endingdate := CALCDATE('<+CM>',RefDate);
                                 END ELSE BEGIN
                                   IF Startingdate = 0D THEN
                                     Startingdate := RefDate;
                                   IF Endingdate = 0D THEN
                                     Endingdate := RefDate;
                                 END;
                               END;
                             END;
                              }

      { 8   ;2   ;Field     ;
                  CaptionML=[DEU=MwSt.-Posten einschlieáen;
                             ENU=Include VAT Entries];
                  OptionCaptionML=[DEU=Offen,Geschlossen,Offen und geschlossen;
                                   ENU=Open,Closed,Open and Closed];
                  SourceExpr=Selection }

      { 4   ;2   ;Field     ;
                  CaptionML=[DEU=MwSt.-Posten einschlieáen;
                             ENU=Include VAT Entries];
                  OptionCaptionML=[DEU=Vor und innerhalb Periode,Innerhalb Periode;
                                   ENU=Before and Within Period,Within Period];
                  SourceExpr=PeriodSelection }

      { 11  ;2   ;Field     ;
                  CaptionML=[DEU=Berichtstyp;
                             ENU=Reporting Type];
                  OptionCaptionML=[DEU=Quartal,Monat,Definierte Periode;
                                   ENU=Quarter,Month,Defined period];
                  SourceExpr=PeriodType;
                  OnValidate=BEGIN
                               IF PeriodType = PeriodType::month THEN
                                 monthPeriodTypeOnValidate;
                               IF PeriodType = PeriodType::quarter THEN
                                 quarterPeriodTypeOnValidate;
                             END;
                              }

      { 1160007;2;Field     ;
                  CaptionML=[DEU=Positionen prfen;
                             ENU=Check Positions];
                  SourceExpr=CheckPositions }

      { 1   ;2   ;Field     ;
                  CaptionML=[DEU=Auf ganze Zahlen runden;
                             ENU=Round to Whole Numbers];
                  SourceExpr=PrintInWholeNumbers }

      { 1160015;2;Field     ;
                  Name=PDFFilenameControl;
                  CaptionML=[DEU=PDF-Dateiname;
                             ENU=PDF File Name];
                  SourceExpr=PDFFileName;
                  OnAssistEdit=BEGIN
                                 PDFFileName := CommonDlgMgt.OpenFile(Text1160052,PDFFileName,4,Text1160053,0);
                               END;
                                }

      { 1160017;2;Field     ;
                  Name=FDFFilenameControl;
                  CaptionML=[DEU=FDF-Dateiname;
                             ENU=FDF File Name];
                  SourceExpr=FDFFileName;
                  Visible=FDFFilenameControlVisible;
                  OnAssistEdit=BEGIN
                                 FDFFileName := CommonDlgMgt.OpenFile(Text1160054,FDFFileName,4,Text1160055,1);
                               END;
                                }

      { 1160001;2;Field     ;
                  Name=XMLFilenameControl;
                  CaptionML=[DEU=XML-Dateiname;
                             ENU=XML File Name];
                  SourceExpr=XMLFileName;
                  Visible=XMLFilenameControlVisible;
                  OnAssistEdit=BEGIN
                                 XMLFileName := CommonDlgMgt.OpenFile(Text1160056,XMLFileName,4,Text1160057,1);
                               END;
                                }

      { 1160003;2;Field     ;
                  CaptionML=[DEU=Fr Zahlung von Verbindlichkeiten genutzter berschuss;
                             ENU=Surplus Used to Pay Dues];
                  SourceExpr=UseARE }

      { 1160005;2;Field     ;
                  CaptionML=[DEU=Weitere per Post geschickte Rechnungen;
                             ENU=Additional Invoices sent via Mail];
                  SourceExpr=UseREPO }

      { 1160000;2;Field     ;
                  CaptionML=[DEU=Nummer õ 6 Abs. 1;
                             ENU=Number õ6 Abs. 1];
                  Numeric=Yes;
                  BlankZero=Yes;
                  SourceExpr=NumberPar6Abs1;
                  MinValue=0;
                  MaxValue=99 }

    }
  }
  CODE
  {
    VAR
      Companyinfo@1160000 : Record 79;
      GLAcc@1160001 : Record 15;
      GLSetup@1160002 : Record 98;
      VATEntries@1160003 : Record 254;
      CommonDlgMgt@1160010 : Codeunit 412;
      GeneralMgt@1160011 : Codeunit 11501;
      Selection@1160006 : 'Open,Closed,Open and Closed';
      PeriodSelection@1160007 : 'Before and Within Period,Within Period';
      PeriodType@1160008 : 'quarter,month,defined period';
      PrintInWholeNumbers@1160009 : Boolean;
      Amount@1160013 : Decimal;
      TotalAmount@1160014 : Decimal;
      Position@1160015 : ARRAY [2000] OF Decimal;
      RowNo@1160017 : ARRAY [6] OF Code[10];
      ErrorText@1160018 : Text[80];
      i@1160019 : Integer;
      ArrayIndex@1160020 : Integer;
      loop@1160012 : Integer;
      FromDate@1160021 : Date;
      ToDate@1160022 : Date;
      Startingdate@1160050 : Date;
      Endingdate@1160051 : Date;
      XMLFile@1160029 : File;
      FDFFile@1160030 : File;
      XMLFileName@1160031 : Text[260];
      PDFFileName@1160024 : Text[260];
      FDFFileName@1160025 : Text[260];
      Text1160005@1160032 : TextConst 'DEU=Es wurde keine XML-Datei erstellt, weil Sie keinen XML-Dateinamen definiert haben.;ENU=No XML File was created, since you didn''t define a XML Filename.';
      UseARE@1160033 : Boolean;
      UseREPO@1160034 : Boolean;
      Text1160006@1160042 : TextConst 'DEU=Es muss ein steuerpflichtiger Umsatz (KZ 000) eingegeben werden. Der Wert null ist nicht zulssig.\KZ 000 muss vorhanden sein.;ENU=A taxable revenue (KZ 000) must be entered. The value Zero is not allowed.\KZ 000 must exist.';
      Text1160007@1160041 : TextConst 'DEU=Die Summe der steuerfreien Umstze ist gráer als die Summe der steuerpflichtigen Umstze.\KZ 011+012+015+016+017+018+019+020 > KZ 000+001-021;ENU=The total of taxfree revenues is bigger than the total of taxable revenues.\KZ 011+012+015+016+017+018+019+020 > KZ 000+001-021';
      Text1160008@1160040 : TextConst 'DEU=Die Summe der steuerpflichtigen Umstze abzglich der Summe der steuerfreien Umstze weicht von der Summe der zu besteuernden Umstze ab.\KZ 022+025+029+037+038+052 <> (KZ 000+001-021) - (KZ 011+012+015+016+017+018+019+020);ENU=The total of taxable revenues reduced by the total of taxfree revenues differs from the total of to be taxed revenues.\KZ 022+025+029+037+038+052 <> (KZ 000+001-021) - (KZ 011+012+015+016+017+018+019+020)';
      CheckPositions@1160043 : Boolean;
      Text1160009@1160044 : TextConst 'DEU=Die Vorsteuer aus EU-Umstzen und/oder steuerbefreiten EU-Umstzen nach Art. 6 Abs. 2 kann nur geltend gemacht werden, wenn steuerpflichtige EU-Umstze vorliegen.\KZ 065 und KZ 065 nur zusammen mit KZ 070.;ENU=Input tax from EC revenues and/or taxfree EC revenues reg. Art. 6 Abs. 2 only can be taken, if taxable EC revenues exist.\KZ 065 and KZ 065 only together with KZ 070.';
      Text1160010@1160045 : TextConst 'DEU=Die steuerfreien EU-Umstze nach Art. 6 Abs. 2 sind gráer als die steuerpflichtigen EU-Umstze.\KZ 071 > KZ 070.;ENU=The taxfree EC revenues reg. Art. 6 Abs. 2 are bigger than the taxable EC revenues.\KZ 071 > KZ 070.';
      Text1160011@1160046 : TextConst 'DEU=Die steuerpflichtigen EU-Umstze abzglich der steuerfreien EU-Umstze nach Art. 6 Abs. 2 weichen von der Summe der zu deklarierenden EU-Umstze ab.\KZ 072 + 073 + 088 <> KZ 070 - 071.;ENU=The taxable EC revenues reduced with the taxfree EC revenues reg. Art. 6 Abs. 2 differ from the total of declarable EC revenues.\KZ 072 + 073 + 088 <> KZ 070 - 071.';
      Text1160012@1160047 : TextConst 'DEU=Vorsteuern nach õ 19 Abs. 1, Art. 19 Abs. 1 und Art. 25 Abs. 5 knnen nur geltend gemacht werden, wenn die fllige Steuer nach õ 19 Abs. 1,  Art. 19 Abs. 1 und Art. 25 Abs. 5 vorliegt.\KZ 066 nur zusammen mit KZ 057.;ENU=Input taxes reg. tax due reg. õ 19 Abs. 1, Art. 19 Abs. 1 and Art. 25 Abs. 5 only can be claimed if tax due reg. õ 19 Abs. 1,  Art. 19 Abs. 1 and Art. 25 Abs. 5 exist.\KZ 066 only together with KZ 057.';
      NumberPar6Abs1@1160048 : Integer;
      Text1160013@1160049 : TextConst 'DEU=Um steuerfreie Umstze ohne Vorsteuerabzug (Position 020) geltend machen zu knnen, muss die relevante Nummer von õ 6 Abs. 1 angegeben werden.\KZ 020 nur zusammen mit "Nummer von õ 6 Abs. 1".;ENU=In order to claim taxfree revenues without input tax reduction (position 020) the necessary number of õ6 Abs. 1 has to be specified.\KZ 020 only together with "Number of õ6 Abs. 1".';
      Text1160052@1160052 : TextConst 'DEU=Auswahl der PDF-Datei;ENU=Selection of the PDF-File';
      Text1160053@1160053 : TextConst 'DEU=Portable Document Format-Datei|*.pdf|Alle Dateien|*.*;ENU=Portable Document Format File|*.pdf|All Files|*.*';
      Text1160054@1160054 : TextConst 'DEU=Auswahl der FDF-Datei;ENU=Selection of the FDF-File';
      Text1160055@1160055 : TextConst 'DEU=Forms Data Format-Datei|*.fdf|Alle Dateien|*.*;ENU=Forms Data Format File|*.fdf|All Files|*.*';
      Text1160056@1160056 : TextConst 'DEU=Auswahl der XML-Datei;ENU=Selection of the XML-File';
      Text1160057@1160057 : TextConst 'DEU=Extensible Markup Language-Datei|*.xml|Alle Dateien|*.*;ENU=Extensible Markup Language File|*.xml|All Files|*.*';
      Text1160058@1160058 : TextConst 'DEU=Geben Sie einen PDF-Dateinamen an.;ENU=Please specify a PDF File Name.';
      Text1160059@1160059 : TextConst 'DEU=Geben Sie einen FDF-Dateinamen an.;ENU=Please specify a FDF File Name.';
      Text1160060@1160060 : TextConst 'DEU=FDF-Datei %1 wurde erfolgreich erstellt.\Mchten Sie eine Vorschau der Datei durchfhren?;ENU=FDF File %1 successfully created.\Do you want to preview the file?';
      Text1160061@1160061 : TextConst 'DEU=Mchten Sie das Start- und Enddatum entsprechend dem ausgewhlten Berichtstyp festlegen?;ENU=Would you like to set the Starting and Ending Date according to the selected Reporting Type?';
      Text1160062@1160062 : TextConst 'DEU=Aufgrund nicht ordnungsgemáer Filtereinstellungen fr die Felder %1 und/oder %2 enthlt Ihre Umsatzsteuererklrung mglicherweise fehlerhafte Werte. berprfen Sie den Sachverhalt.;ENU=Due to improper filter settings on the fields %1 and/or %2, your VAT Statement might contain incorrect values. Please check.';
      Text1160063@1160063 : TextConst 'DEU=Standard;ENU=Default';
      FDFFilenameControlVisible@19016139 : Boolean INDATASET;
      XMLFilenameControlVisible@19067901 : Boolean INDATASET;

    LOCAL PROCEDURE CalcLineTotal@3(VATStmtLine2@1160000 : Record 256;VAR TotalAmount@1160001 : Decimal;Level@1160002 : Integer) : Boolean;
    BEGIN
      IF Level = 0 THEN BEGIN
        TotalAmount := 0;
        Amount := 0;
      END;
      CASE VATStmtLine2.Type OF
        VATStmtLine2.Type::"Account Totaling":
          BEGIN
            GLAcc.SETFILTER("No.",VATStmtLine2."Account Totaling");
            "VAT Statement Line".COPYFILTER("Date Filter",GLAcc."Date Filter");
            Amount := 0;
            IF GLAcc.FIND('-') AND (VATStmtLine2."Account Totaling" <> '') THEN
              REPEAT
                GLAcc.CALCFIELDS("Net Change","Additional-Currency Net Change");
                Amount := Amount + GLAcc."Net Change";
              UNTIL GLAcc.NEXT = 0;
            CalcTotalAmount(VATStmtLine2,TotalAmount);
          END;
        VATStmtLine2.Type::"VAT Entry Totaling":
          BEGIN
            Amount := 0;
            VATEntries.RESET;
            VATEntries.SETCURRENTKEY(
              Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group",
              "Tax Jurisdiction Code","Use Tax","Posting Date");
            VATEntries.SETRANGE(Type,VATStmtLine2."Gen. Posting Type");
            VATEntries.SETRANGE("VAT Bus. Posting Group",VATStmtLine2."VAT Bus. Posting Group");
            VATEntries.SETRANGE("VAT Prod. Posting Group",VATStmtLine2."VAT Prod. Posting Group");
            VATEntries.SETRANGE("Tax Jurisdiction Code",VATStmtLine2."Tax Jurisdiction Code");
            VATEntries.SETRANGE("Use Tax",VATStmtLine2."Use Tax");
            IF "VAT Statement Line".GETFILTER("Date Filter") <> '' THEN
              IF PeriodSelection = PeriodSelection::"Before and Within Period" THEN
                VATEntries.SETRANGE("Posting Date",0D,"VAT Statement Line".GETRANGEMAX("Date Filter"))
              ELSE
                "VAT Statement Line".COPYFILTER("Date Filter",VATEntries."Posting Date");
            CASE Selection OF
              Selection::Open:
                VATEntries.SETRANGE(Closed,FALSE);
              Selection::Closed:
                VATEntries.SETRANGE(Closed,TRUE);
            END;
            CASE VATStmtLine2."Amount Type" OF
              VATStmtLine2."Amount Type"::Amount:
                BEGIN
                  VATEntries.CALCSUMS(Amount,"Additional-Currency Amount");
                  Amount := Amount + VATEntries.Amount;
                END;
              VATStmtLine2."Amount Type"::Base:
                BEGIN
                  VATEntries.CALCSUMS(Base,"Additional-Currency Base");
                  Amount := Amount + VATEntries.Base;
                END;
              VATStmtLine2."Amount Type"::"Unrealized Amount":
                BEGIN
                  VATEntries.CALCSUMS("Unrealized Amount","Add.-Currency Unrealized Amt.");
                  Amount := Amount + VATEntries."Unrealized Amount";
                END;
              VATStmtLine2."Amount Type"::"Unrealized Base":
                BEGIN
                  VATEntries.CALCSUMS("Unrealized Base","Add.-Currency Unrealized Base");
                  Amount := Amount + VATEntries."Unrealized Base";
                END;
            END;
            CalcTotalAmount(VATStmtLine2,TotalAmount);
          END;
        VATStmtLine2.Type::"Row Totaling":
          BEGIN
            IF Level >= ARRAYLEN(RowNo) THEN
              EXIT(FALSE);
            Level := Level + 1;
            RowNo[Level] := VATStmtLine2."Row No.";

            IF VATStmtLine2."Row Totaling" = '' THEN
              EXIT(TRUE);
            VATStmtLine2.SETRANGE("Statement Template Name",VATStmtLine2."Statement Template Name");
            VATStmtLine2.SETRANGE("Statement Name",VATStmtLine2."Statement Name");
            VATStmtLine2.SETFILTER("Row No.",VATStmtLine2."Row Totaling");
            IF VATStmtLine2.FIND('-') THEN
              REPEAT
                IF NOT CalcLineTotal(VATStmtLine2,TotalAmount,Level) THEN BEGIN
                  IF Level > 1 THEN
                    EXIT(FALSE);
                  FOR i := 1 TO ARRAYLEN(RowNo) DO
                    ErrorText := ErrorText + RowNo[i] + ' => ';
                  ErrorText := ErrorText + '...';
                  VATStmtLine2.FIELDERROR("Row No.",ErrorText);
                END;
              UNTIL VATStmtLine2.NEXT = 0;
          END;
        VATStmtLine2.Type::Description:
          ;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CalcTotalAmount@2(VATStmtLine2@1160000 : Record 256;VAR TotalAmount@1160001 : Decimal);
    BEGIN
      IF VATStmtLine2."Calculate with" = 1 THEN
        Amount := -Amount;
      IF PrintInWholeNumbers THEN
        Amount := ROUND(Amount,1,'<');
      TotalAmount := TotalAmount + Amount;

      CalcPosition("VAT Statement Line"."Row No.");
    END;

    PROCEDURE CalcPosition@1(Index@1160000 : Code[10]);
    BEGIN
      IF EVALUATE(ArrayIndex,Index) THEN
        IF (ArrayIndex > 0) AND (ArrayIndex <= ARRAYLEN(Position)) THEN
          Position[ArrayIndex] := Position[ArrayIndex] + Amount;
    END;

    PROCEDURE FormatDecimal@1160000(InputDecimal@1160000 : Decimal) : Text[30];
    BEGIN
      EXIT(CONVERTSTR(FORMAT(InputDecimal,0,'<Sign><integer><decimals,3>'),',','.'));
    END;

    PROCEDURE CheckPositionnumbers@4();
    BEGIN
      IF Position[1000] < 0 THEN
        ERROR(Text1160006);
      IF Position[1011] + Position[1012] + Position[1015] + Position[1016] +
        Position[1017] + Position[1018] + Position[1019] + Position[1020] >
        Position[1000] + Position[1001] + Position[1021]
      THEN
        ERROR(Text1160007);
      IF (Position[22] + Position[25] + Position[29] + Position[37] + Position[38] + Position[52]) <>
        (Position[1000] + Position[1001] - Position[1021]) -
        (Position[1011] + Position[1012] + Position[1015] + Position[1016] +
        Position[1017] + Position[1018] + Position[1019] + Position[1020])
      THEN
        ERROR(Text1160008);
      IF (Position[1065] + Position[71] <> 0) AND (Position[70] = 0) THEN
        ERROR(Text1160009);
      IF Position[71] > Position[70] THEN
        ERROR(Text1160010);
      IF Position[70] - Position[71] <> Position[72] + Position[73] + Position[88] THEN
        ERROR(Text1160011);
      IF ((Position[1057] = 0) AND (Position[1066] <> 0)) OR ((Position[1057] <> 0) AND (Position[1066] = 0)) THEN
        ERROR(Text1160012);
      IF (Position[1020] <> 0) AND (NumberPar6Abs1 > 0) THEN
        ERROR(Text1160013);
    END;

    LOCAL PROCEDURE CreateFDFFile@1160001();
    VAR
      NewPDFFileName@1160000 : Text[300];
      char@1160001 : Text[1];
    BEGIN
      IF CurrReport.LANGUAGE <> 3079 THEN
        CurrReport.LANGUAGE := 3079;

      NewPDFFileName := PDFFileName;
      IF STRPOS(PDFFileName,'\') > 0 THEN BEGIN
        NewPDFFileName := '';
        char := '';
        FOR i := 1 TO STRLEN(PDFFileName) DO BEGIN
          IF char = '\' THEN
            NewPDFFileName := NewPDFFileName + char;
          char := FORMAT(PDFFileName[i]);
          NewPDFFileName := NewPDFFileName + char;
        END;
      END;

      IF NOT ISSERVICETIER THEN FDFFile.QUERYREPLACE(TRUE);
      FDFFile.TEXTMODE(TRUE);
      FDFFile.CREATE(FDFFileName);
      FDFFile.WRITE('%FDF-1.2');
      FDFFile.WRITE('1 0 obj <<');
      FDFFile.WRITE('/FDF << /Fields [');
      AddFDFDataHeader;
      AddFDFData;
      AddFDFDataFooter;
      FDFFile.WRITE(']/F (' + NewPDFFileName + ')>>');
      FDFFile.WRITE('>>');
      FDFFile.WRITE('endobj');
      FDFFile.WRITE('trailer');
      FDFFile.WRITE('<< /Root 1 0 R>>');
      FDFFile.WRITE('%%EOF');
      FDFFile.CLOSE;

      CurrReport.LANGUAGE := GLOBALLANGUAGE;
    END;

    LOCAL PROCEDURE AddFDFDataHeader@1160002();
    VAR
      CompanyAddressText@1160000 : Text[300];
    BEGIN
      FDFFile.WRITE('<< /V (' +
          GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Tax Office Name",'<>',' ')) + '\n' +
          GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Tax Office Address",'<>',' ')) + '\n' +
          GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Tax Office Post Code",'<>',' ')) + ' ' +
          GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Tax Office City",'<>',' ')) +
          ')/T (Text01)>>');
      FDFFile.WRITE('<< /V (' +
          GeneralMgt.Ascii2Ansi(COPYSTR(DELCHR(Companyinfo."Registration No.",'<>',' '),1,3)) +
          ')/T (Zahl02_1)>>');
      FDFFile.WRITE('<< /V (' +
          GeneralMgt.Ascii2Ansi(COPYSTR(DELCHR(Companyinfo."Registration No.",'<>',' '),5,4)) +
          ')/T (Zahl02_2)>>');
      IF DATE2DMY(Startingdate,3) = DATE2DMY(Endingdate,3) THEN BEGIN
        IF (Startingdate = CALCDATE('<-CM>',Startingdate)) AND (Endingdate = CALCDATE('<+CM>',Startingdate)) THEN
          FDFFile.WRITE('<< /V (' +
              GeneralMgt.Ascii2Ansi(FORMAT(Startingdate,0,'<Month Text>')) +
              ')/T (DropDown04)>>')
        ELSE IF (Startingdate = CALCDATE('<-CQ>',Startingdate)) AND (Endingdate = CALCDATE('<+CQ>',Startingdate)) THEN
          FDFFile.WRITE('<< /V (' +
              GeneralMgt.Ascii2Ansi(FORMAT(Startingdate,0,'<Month Text>')) +
              '-' +
              GeneralMgt.Ascii2Ansi(FORMAT(Endingdate,0,'<Month Text>')) +
              ')/T (DropDown05)>>');
        FDFFile.WRITE('<< /V (' + FORMAT(DATE2DMY(Startingdate,3)) + ')/T (TextJahr21c)>>');
      END;

      CompanyAddressText := '<< /V (';
      IF Companyinfo.Name <> '' THEN
        CompanyAddressText := CompanyAddressText + GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo.Name,'<>',' '));
      IF Companyinfo."Name 2" <> '' THEN
        CompanyAddressText := CompanyAddressText + ', ' + GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Name 2",'<>',' ')) + '\n'
      ELSE
        CompanyAddressText := CompanyAddressText + '\n';
      IF Companyinfo.Address <> '' THEN
        CompanyAddressText := CompanyAddressText + GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo.Address,'<>',' '));
      IF Companyinfo."Address 2" <> '' THEN
        CompanyAddressText := CompanyAddressText + ', ' + GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Address 2",'<>',' ')) + ', '
      ELSE
        CompanyAddressText := CompanyAddressText + ',';
      CompanyAddressText := CompanyAddressText +
          GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Post Code",'<>',' ')) + ' ' +
          GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo.City,'<>',' '));
      IF Companyinfo."Phone No." <> '' THEN
        CompanyAddressText := CompanyAddressText + '\n' + GeneralMgt.Ascii2Ansi(DELCHR(Companyinfo."Phone No.",'<>',' '));
      CompanyAddressText := CompanyAddressText + ')/T (Text09)>>';
      FDFFile.WRITE(CompanyAddressText);
    END;

    LOCAL PROCEDURE AddFDFData@1160003();
    BEGIN
      IF Position[1000] > 0  THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1000],0,1) + ')/T (Zahl101)>>');
      IF Position[1001] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1001],0,1) + ')/T (Zahl102)>>');
      IF Position[1021] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1021],0,1) + ')/T (Zahl103)>>');
      FDFFile.WRITE('<< /V (0)/T (Zahl104)>>');
      IF Position[1011] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1011],0,1) + ')/T (Zahl105)>>');
      IF Position[1012] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1012],0,1) + ')/T (Zahl106)>>');
      IF Position[1015] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1015],0,1) + ')/T (Zahl107)>>');
      IF Position[1017] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1017],0,1) + ')/T (Zahl108)>>');
      IF Position[1018] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1018],0,1) + ')/T (Zahl109)>>');
      IF Position[1019] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1019],0,1) + ')/T (Zahl110)>>');
      IF Position[1016] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1016],0,1) + ')/T (Zahl111)>>');
      IF NumberPar6Abs1 > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(NumberPar6Abs1) + ')/T (Zahl112)>>');
      IF Position[1020] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1020],0,1) + ')/T (Zahl113)>>');
      IF Position[22] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[22],0,1) + ')/T (Zahl115a)>>');
      IF Position[29] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[29],0,1) + ')/T (Zahl116a)>>');
      IF Position[25] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[25],0,1) + ')/T (Zahl117a)>>');
      IF Position[37] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[37],0,1) + ')/T (Zahl118a)>>');
      IF Position[52] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[52],0,1) + ')/T (Zahl119a)>>');
      IF Position[38] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[38],0,1) + ')/T (Zahl120a)>>');
      IF Position[1056] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1056],0,1) + ')/T (Zahl123)>>');
      IF Position[1057] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1057],0,1) + ')/T (Zahl124)>>');
      IF Position[1048] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1048],0,1) + ')/T (Zahl125)>>');
      IF Position[1032] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1032],0,1) + ')/T (Zahl125b)>>');
      IF Position[1044] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1044],0,1) + ')/T (Zahl125a)>>');
      IF Position[70] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[70],0,1) + ')/T (Zahl126)>>');
      IF Position[71] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[71],0,1) + ')/T (Zahl127)>>');
      IF Position[72] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[72],0,1) + ')/T (Zahl128a)>>');
      IF Position[73] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[73],0,1) + ')/T (Zahl129a)>>');
      IF Position[88] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[88],0,1) + ')/T (Zahl130a)>>');
      IF Position[76] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[76],0,1) + ')/T (Zahl131)>>');
      IF Position[77] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[77],0,1) + ')/T (Zahl132)>>');
      IF Position[1060] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1060],0,1) + ')/T (Zahl133)>>');
      IF Position[1061] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1061],0,1) + ')/T (Zahl134)>>');
      IF Position[1083] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1083],0,1) + ')/T (Zahl134a)>>');
      IF Position[1065] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1065],0,1) + ')/T (Zahl135)>>');
      IF Position[1066] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1066],0,1) + ')/T (Zahl136)>>');
      IF Position[1082] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1082],0,1) + ')/T (Zahl136a)>>');
      IF Position[1089] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1089],0,1) + ')/T (Zahl137a)>>');
      IF Position[1087] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1087],0,1) + ')/T (Zahl137)>>');
      IF Position[1064] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1064],0,1) + ')/T (Zahl138)>>');
      IF Position[1062] > 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1062],0,1) + ')/T (Zahl139)>>');
      IF Position[1063] <> 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1063],0,1) + ')/T (Zahl140)>>');
      IF Position[1067] <> 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1067],0,1) + ')/T (Zahl141)>>');
      IF Position[1027] <> 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1027],0,1) + ')/T (Zahl143_27)>>');
      IF Position[1028] <> 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1028],0,1) + ')/T (Zahl143_28)>>');
      IF Position[1090] <> 0 THEN
        FDFFile.WRITE('<< /V (' + FORMAT(Position[1090],0,1) + ')/T (Zahl143)>>');
    END;

    LOCAL PROCEDURE AddFDFDataFooter@1160004();
    BEGIN
      IF UseARE THEN
        FDFFile.WRITE('<< /V (1)/T (Checkbox100X)>>');
      IF UseREPO THEN
        FDFFile.WRITE('<< /V (1)/T (Checkbox100Xx)>>');
      FDFFile.WRITE('<< /V (' + FORMAT(TODAY,10,'<Day,2>.<Month,2>.<Year4>') + ')/T (Tagesdatum2)>>');
    END;

    LOCAL PROCEDURE CreateXMLFile@1160005();
    BEGIN
      IF NOT ISSERVICETIER THEN XMLFile.QUERYREPLACE(FALSE);
      XMLFile.TEXTMODE(TRUE);
      XMLFile.CREATE(XMLFileName);

      XMLFile.WRITE('<?xml version="1.0" encoding="iso-8859-1"?>');
      XMLFile.WRITE('<ERKLAERUNGS_UEBERMITTLUNG>');
        XMLFile.WRITE('<INFO_DATEN>');
          XMLFile.WRITE('<ART_IDENTIFIKATIONSBEGRIFF>FASTNR</ART_IDENTIFIKATIONSBEGRIFF>');
          XMLFile.WRITE(STRSUBSTNO('<IDENTIFIKATIONSBEGRIFF>%1%2</IDENTIFIKATIONSBEGRIFF>',
            Companyinfo."Tax Office Number",DELCHR(Companyinfo."Registration No.",'=','-/ ')));
          XMLFile.WRITE('<PAKET_NR>999999999</PAKET_NR>');
          XMLFile.WRITE(STRSUBSTNO('<DATUM_ERSTELLUNG type="datum">%1</DATUM_ERSTELLUNG>',
            FORMAT(TODAY,10,'<YEAR4>-<MONTH,2>-<DAY,2>')));
          XMLFile.WRITE(STRSUBSTNO('<UHRZEIT_ERSTELLUNG type="uhrzeit">%1</UHRZEIT_ERSTELLUNG>',
            FORMAT(TIME,8,'<HOURS24,2><Filler Character,0>:<Minutes,2>:<seconds,2>')));
          XMLFile.WRITE('<ANZAHL_ERKLAERUNGEN>1</ANZAHL_ERKLAERUNGEN>');
        XMLFile.WRITE('</INFO_DATEN>');
        XMLFile.WRITE('<ERKLAERUNG art="U30">');
          XMLFile.WRITE('<SATZNR>1</SATZNR>');
          XMLFile.WRITE('<ALLGEMEINE_DATEN>');
            XMLFile.WRITE('<ANBRINGEN>U30</ANBRINGEN>');
            XMLFile.WRITE(STRSUBSTNO('<ZRVON type="jahrmonat">%1</ZRVON>',
              FORMAT(FromDate,7,'<YEAR4>-<MONTH,2>')));
            XMLFile.WRITE(STRSUBSTNO('<ZRBIS type="jahrmonat">%1</ZRBIS>',
              FORMAT(ToDate,7,'<YEAR4>-<MONTH,2>')));
            XMLFile.WRITE(STRSUBSTNO('<FASTNR>%1%2</FASTNR>',
              Companyinfo."Tax Office Number",DELCHR(Companyinfo."Registration No.",'=','-/ ')));
          XMLFile.WRITE('</ALLGEMEINE_DATEN>');
          XMLFile.WRITE('<LIEFERUNGEN_LEISTUNGEN_EIGENVERBRAUCH>');
            XMLFile.WRITE(STRSUBSTNO('<KZ000 type="kz">%1</KZ000>',FormatDecimal(Position[1000])));
            IF Position[1001] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ001 type="kz">%1</KZ001>',FormatDecimal(Position[1001])));
            IF Position[1021] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ021 type="kz">%1</KZ021>',FormatDecimal(Position[1021])));
            XMLFile.WRITE('<STEUERFREI>');
              IF Position[1011] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ011 type="kz">%1</KZ011>',FormatDecimal(Position[1011])));
              IF Position[1012] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ012 type="kz">%1</KZ012>',FormatDecimal(Position[1012])));
              IF Position[1015] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ015 type="kz">%1</KZ015>',FormatDecimal(Position[1015])));
              IF Position[1017] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ017 type="kz">%1</KZ017>',FormatDecimal(Position[1017])));
              IF Position[1018] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ018 type="kz">%1</KZ018>',FormatDecimal(Position[1018])));
              IF Position[1019] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ019 type="kz">%1</KZ019>',FormatDecimal(Position[1019])));
            IF Position[1016] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ016 type="kz">%1</KZ016>',FormatDecimal(Position[1016])));
            IF Position[1020] <> 0 THEN BEGIN
              XMLFile.WRITE('<VST>' + FORMAT(NumberPar6Abs1) + '</VST>');
              XMLFile.WRITE(STRSUBSTNO('<KZ020 type="kz">%1</KZ020>',FormatDecimal(Position[1020])));
            END;
            XMLFile.WRITE('</STEUERFREI>');
            XMLFile.WRITE('<VERSTEUERT>');
              IF Position[22] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ022 type="kz">%1</KZ022>',FormatDecimal(Position[22])));
              IF Position[29] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ029 type="kz">%1</KZ029>',FormatDecimal(Position[29])));
              IF Position[25] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ025 type="kz">%1</KZ025>',FormatDecimal(Position[25])));
              IF Position[37] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ037 type="kz">%1</KZ037>',FormatDecimal(Position[37])));
              IF Position[52] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ052 type="kz">%1</KZ052>',FormatDecimal(Position[52])));
              IF Position[38] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ038 type="kz">%1</KZ038>',FormatDecimal(Position[38])));
              IF Position[1056] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ056 type="kz">%1</KZ056>',FormatDecimal(Position[1056])));
              IF Position[1057] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ057 type="kz">%1</KZ057>',FormatDecimal(Position[1057])));
              IF Position[1048] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ048 type="kz">%1</KZ048>',FormatDecimal(Position[1048])));
              IF Position[1044] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ044 type="kz">%1</KZ044>',FormatDecimal(Position[1044])));
              IF Position[1032] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ032 type="kz">%1</KZ032>',FormatDecimal(Position[1032])));
            XMLFile.WRITE('</VERSTEUERT>');
          XMLFile.WRITE('</LIEFERUNGEN_LEISTUNGEN_EIGENVERBRAUCH>');
          XMLFile.WRITE('<INNERGEMEINSCHAFTLICHE_ERWERBE>');
            IF Position[70] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ070 type="kz">%1</KZ070>',FormatDecimal(Position[70])));
            IF Position[71] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ071 type="kz">%1</KZ071>',FormatDecimal(Position[71])));
            XMLFile.WRITE('<VERSTEUERT_IGE>');
              IF Position[72] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ072 type="kz">%1</KZ072>',FormatDecimal(Position[72])));
              IF Position[73] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ073 type="kz">%1</KZ073>',FormatDecimal(Position[73])));
              IF Position[88] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ088 type="kz">%1</KZ088>',FormatDecimal(Position[88])));
              IF Position[76] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ076 type="kz">%1</KZ076>',FormatDecimal(Position[76])));
              IF Position[77] <> 0 THEN
                XMLFile.WRITE(STRSUBSTNO('<KZ077 type="kz">%1</KZ077>',FormatDecimal(Position[77])));
            XMLFile.WRITE('</VERSTEUERT_IGE>');
          XMLFile.WRITE('</INNERGEMEINSCHAFTLICHE_ERWERBE>');
          XMLFile.WRITE('<VORSTEUER>');
            IF Position[1060] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ060 type="kz">%1</KZ060>',FormatDecimal(Position[1060])));
            IF Position[1061] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ061 type="kz">%1</KZ061>',FormatDecimal(Position[1061])));
            IF Position[1083] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ083 type="kz">%1</KZ083>',FormatDecimal(Position[1083])));
            IF Position[1065] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ065 type="kz">%1</KZ065>',FormatDecimal(Position[1065])));
            IF Position[1066] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ066 type="kz">%1</KZ066>',FormatDecimal(Position[1066])));
            IF Position[1082] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ082 type="kz">%1</KZ082>',FormatDecimal(Position[1082])));
            IF Position[1087] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ087 type="kz">%1</KZ087>',FormatDecimal(Position[1087])));
            IF Position[1089] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ089 type="kz">%1</KZ089>',FormatDecimal(Position[1089])));
            IF Position[1064] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ064 type="kz">%1</KZ064>',FormatDecimal(Position[1064])));
            IF Position[1062] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ062 type="kz">%1</KZ062>',FormatDecimal(Position[1062])));
            IF Position[1063] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ063 type="kz">%1</KZ063>',FormatDecimal(Position[1063])));
            IF Position[1067] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ067 type="kz">%1</KZ067>',FormatDecimal(Position[1067])));
            IF Position[1027] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ027 type="kz">%1</KZ027>',FormatDecimal(Position[1027])));
            IF Position[1028] <> 0 THEN
              XMLFile.WRITE(STRSUBSTNO('<KZ028 type="kz">%1</KZ028>',FormatDecimal(Position[1028])));
            IF Position[1090] <> 0 THEN
            XMLFile.WRITE(STRSUBSTNO('<KZ090 type="kz">%1</KZ090>',FormatDecimal(Position[1090])));
            IF UseARE THEN
              XMLFile.WRITE('<ARE>J</ARE>');
            IF UseREPO THEN
              XMLFile.WRITE('<REPO>J</REPO>');
          XMLFile.WRITE('</VORSTEUER>');
        XMLFile.WRITE('</ERKLAERUNG>');
      XMLFile.WRITE('</ERKLAERUNGS_UEBERMITTLUNG>');
      XMLFile.CLOSE;
    END;

    LOCAL PROCEDURE quarterPeriodTypeOnValidate@19029369();
    BEGIN
      IF Startingdate <> 0D THEN
        IF (Startingdate <> CALCDATE('<-CQ>',Startingdate)) OR (Endingdate <> CALCDATE('<+CQ>',Startingdate)) THEN
          IF CONFIRM(Text1160061, TRUE) THEN BEGIN
            Startingdate := CALCDATE('<-CQ>',Startingdate);
            Endingdate := CALCDATE('<+CQ>',Startingdate);
          END ELSE
            ERROR('');
    END;

    LOCAL PROCEDURE monthPeriodTypeOnValidate@19063435();
    BEGIN
      IF Startingdate <> 0D THEN
        IF (Startingdate <> CALCDATE('<-CM>',Startingdate)) OR (Endingdate <> CALCDATE('<+CM>',Startingdate)) THEN
          IF CONFIRM(Text1160061, TRUE) THEN BEGIN
            Startingdate := CALCDATE('<-CM>',Startingdate);
            Endingdate := CALCDATE('<+CM>',Startingdate);
          END ELSE
            ERROR('');
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}


OBJECT Table 274 Bank Acc. Reconciliation Line
{
  OBJECT-PROPERTIES
  {
    Date=05.11.08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               BankAccRecon.GET("Bank Account No.","Statement No.");
               "Applied Entries" := 0;
               VALIDATE("Applied Amount",0);
             END;

    OnDelete=BEGIN
               RemoveApplication(Type);
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[DEU=Bankkontoabstimmungszeile;
               ENU=Bank Acc. Reconciliation Line];
    PasteIsValid=No;
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=[DEU=Bankkontonummer;
                                                              ENU=Bank Account No.] }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE (Bank Account No.=FIELD(Bank Account No.));
                                                   CaptionML=[DEU=Auszugsnr.;
                                                              ENU=Statement No.] }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=[DEU=Auszugszeilennr.;
                                                              ENU=Statement Line No.] }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=[DEU=Belegnr.;
                                                              ENU=Document No.] }
    { 5   ;   ;Transaction Date    ;Date          ;CaptionML=[DEU=Transaktionsdatum;
                                                              ENU=Transaction Date] }
    { 6   ;   ;Description         ;Text50        ;CaptionML=[DEU=Beschreibung;
                                                              ENU=Description] }
    { 7   ;   ;Statement Amount    ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   CaptionML=[DEU=Auszugsbetrag;
                                                              ENU=Statement Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Difference          ;Decimal       ;OnValidate=BEGIN
                                                                "Statement Amount" := "Applied Amount" + Difference;
                                                              END;

                                                   CaptionML=[DEU=Differenz;
                                                              ENU=Difference];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[DEU=Ausgleichsbetrag;
                                                              ENU=Applied Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF (Type <> xRec.Type) AND
                                                                   ("Applied Entries" <> 0)
                                                                THEN
                                                                  IF CONFIRM(Text001,FALSE) THEN BEGIN
                                                                    RemoveApplication(xRec.Type);
                                                                    VALIDATE("Applied Amount",0);
                                                                    "Applied Entries" := 0;
                                                                    "Check No." := '';
                                                                  END ELSE
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=[DEU=Art;
                                                              ENU=Type];
                                                   OptionCaptionML=[DEU=Bankposten,Scheckposten,Differenz;
                                                                    ENU=Bank Account Ledger Entry,Check Ledger Entry,Difference];
                                                   OptionString=Bank Account Ledger Entry,Check Ledger Entry,Difference }
    { 11  ;   ;Applied Entries     ;Integer       ;OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=[DEU=Ausgegl. Posten;
                                                              ENU=Applied Entries];
                                                   Editable=No }
    { 12  ;   ;Value Date          ;Date          ;CaptionML=[DEU=Valutadatum;
                                                              ENU=Value Date] }
    { 13  ;   ;Ready for Application;Boolean      ;CaptionML=[DEU=Bereit zum Ausgleich;
                                                              ENU=Ready for Application] }
    { 14  ;   ;Check No.           ;Code20        ;CaptionML=[DEU=Schecknummer;
                                                              ENU=Check No.] }
  }
  KEYS
  {
    {    ;Bank Account No.,Statement No.,Statement Line No.;
                                                   SumIndexFields=Statement Amount,Difference;
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Sie k”nnen eine %1 nicht umbenennen.;ENU=You cannot rename a %1.';
      Text001@1001 : TextConst 'DEU=Ausgleich l”schen?;ENU=Delete application?';
      Text002@1002 : TextConst 'DEU=Aktualisierung abgebrochen.;ENU=Update canceled.';
      BankAccLedgEntry@1003 : Record 271;
      CheckLedgEntry@1004 : Record 272;
      BankAccRecon@1005 : Record 273;
      BankAccSetStmtNo@1006 : Codeunit 375;
      CheckSetStmtNo@1007 : Codeunit 376;

    LOCAL PROCEDURE RemoveApplication@1(AppliedType@1000 : 'Bank Account Ledger Entries,Check Ledger Entries');
    BEGIN
      CASE AppliedType OF
        AppliedType::"Bank Account Ledger Entries":
          BEGIN
            BankAccLedgEntry.RESET;
            BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
            BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
            BankAccLedgEntry.SETRANGE(Open,TRUE);
            BankAccLedgEntry.SETRANGE(
              "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
            BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
            BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
            BankAccLedgEntry.LOCKTABLE;
            CheckLedgEntry.LOCKTABLE;
            IF BankAccLedgEntry.FIND('-') THEN
              REPEAT
                BankAccSetStmtNo.RemoveReconNo(BankAccLedgEntry,Rec,TRUE);
              UNTIL BankAccLedgEntry.NEXT = 0;
            "Applied Entries" := 0;
            VALIDATE("Applied Amount",0);
            MODIFY;
          END;
        AppliedType::"Check Ledger Entries":
          BEGIN
            CheckLedgEntry.RESET;
            CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
            CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
            CheckLedgEntry.SETRANGE(Open,TRUE);
            CheckLedgEntry.SETRANGE(
              "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
            CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
            CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
            BankAccLedgEntry.LOCKTABLE;
            CheckLedgEntry.LOCKTABLE;
            IF CheckLedgEntry.FIND('-') THEN
              REPEAT
                CheckSetStmtNo.RemoveReconNo(CheckLedgEntry,Rec,TRUE);
              UNTIL CheckLedgEntry.NEXT = 0;
            "Applied Entries" := 0;
            VALIDATE("Applied Amount",0);
            "Check No." := '';
            MODIFY;
          END;
      END;
    END;

    LOCAL PROCEDURE DisplayApplication@2();
    BEGIN
      CASE Type OF
        Type::"Bank Account Ledger Entry":
          BEGIN
            BankAccLedgEntry.RESET;
            BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
            BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
            BankAccLedgEntry.SETRANGE(Open,TRUE);
            BankAccLedgEntry.SETRANGE(
              "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
            BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
            BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
            FORM.RUN(0,BankAccLedgEntry);
          END;
        Type::"Check Ledger Entry":
          BEGIN
            CheckLedgEntry.RESET;
            CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
            CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
            CheckLedgEntry.SETRANGE(Open,TRUE);
            CheckLedgEntry.SETRANGE(
              "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
            CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
            CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
            FORM.RUN(0,CheckLedgEntry);
          END;
      END;
    END;

    PROCEDURE GetCurrencyCode@3() : Code[10];
    VAR
      BankAcc@1000 : Record 270;
    BEGIN
      IF ("Bank Account No." = BankAcc."No.") THEN
        EXIT(BankAcc."Currency Code")
      ELSE
        IF BankAcc.GET("Bank Account No.") THEN
          EXIT(BankAcc."Currency Code")
        ELSE
          EXIT('');
    END;

    BEGIN
    END.
  }
}


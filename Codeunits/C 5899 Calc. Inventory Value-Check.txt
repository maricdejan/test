OBJECT Codeunit 5899 Calc. Inventory Value-Check
{
  OBJECT-PROPERTIES
  {
    Date=05.11.08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5804=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1022 : TextConst 'DEU=Sie dÅrfen keinen %1 eingeben.;ENU=You must not enter a %1.';
      Text001@1021 : TextConst 'DEU=Sie mÅssen ein Buchungsdatum eingeben.;ENU=You must enter a posting date.';
      Text002@1020 : TextConst 'DEU=Sie dÅrfen keinen %1 eingeben, wenn pro Artikel berechnet werden soll.;ENU=You must not enter a %1, if Calculate Per is Item.';
      Text004@1000 : TextConst 'DEU=Artikel werden geprÅft #1##########;ENU=Checking items #1##########';
      InvtSetup@1017 : Record 313;
      ItemLedgEntryErrBuf@1024 : TEMPORARY Record 32;
      ObjTransl@1005 : Record 377;
      PostingDate@1008 : Date;
      CalculatePer@1001 : 'Item Ledger Entry,Item';
      ByLocation@1019 : Boolean;
      ByVariant@1018 : Boolean;
      Text007@1006 : TextConst 'DEU=Sie mÅssen die Stapelverarbeitung %1 ausfÅhren, bevor Sie den Lagerbestand neu bewerten kînnen.;ENU=You have to run the %1 batch job, before you can revalue the inventory.';
      Text009@1009 : TextConst 'DEU=Sie dÅrfen keine Artikel mit der %1 %2 neu bewerten, wenn pro Artikelposten berechnet werden soll.;ENU=You must not revalue items with %1 %2, if Calculate Per is Item Ledger Entry.';
      Text011@1016 : TextConst 'DEU="Sie dÅrfen keinen %1 eingeben, wenn Sie Artikel neu bewerten, die die %2 %3 haben und fÅr die %4 = %5 in %6 ist.";ENU=You must not enter a %1 if you revalue items with %2 %3, and if %4 is %5 in %6.';
      Text012@1015 : TextConst 'DEU=Das Feld Nach Lagerort darf nicht ausgefÅllt sein, wenn Sie Artikel neu bewerten, \;ENU=The By Location field must not be filled in if you revalue items \';
      Text013@1014 : TextConst 'DEU="die die %1 %2 und die %3 = %4 in %5 haben.";ENU=with %1 %2, and if %3 is %4 in %5.';
      Text014@1013 : TextConst 'DEU=Das Feld Nach Variante darf nicht ausgefÅllt sein, wenn Sie Artikel neu bewerten, \;ENU=The By Variant field must not be filled in if you revalue items \';
      Text015@1012 : TextConst 'DEU="Sie mÅssen einen %1 oder einen %2 angeben oder die Felder ";ENU="You must fill in a %1 and a %2 or place check marks "';
      Text016@1011 : TextConst 'DEU="Nach Lagerort und Nach Variante aktivieren, ";ENU="in the By Location field and the By Variant field, "';
      Text017@1010 : TextConst 'DEU="wenn Sie Artikel mit der %3 %4 neu bewerten, fÅr die in %7 %5 = %6 ist.";ENU=if you revalue items with %3 %4, and if %5 is %6 in %7.';
      LogErrors@1023 : Boolean;
      ShowDialog@1002 : Boolean;
      Text018@1102601000 : TextConst 'DEU=Artikel %1 kann nicht neu bewertet werden, da mindestens ein ausgehendes %2 offen ist.;ENU=The Item %1 cannot be revalued because there is at least one open Outbound %2.';

    PROCEDURE SetProperties@1(NewPostingDate@1000 : Date;NewCalculatePer@1003 : Option;NewByLocation@1002 : Boolean;NewByVariant@1001 : Boolean;NewLogErrors@1004 : Boolean;NewShowDialog@1005 : Boolean);
    BEGIN
      ItemLedgEntryErrBuf.DELETEALL;
      CLEARALL;

      PostingDate := NewPostingDate;
      CalculatePer := NewCalculatePer;
      ByLocation := NewByLocation;
      ByVariant := NewByVariant;
      LogErrors := NewLogErrors;
      ShowDialog := NewShowDialog;

      InvtSetup.GET;
    END;

    PROCEDURE RunCheck@3(VAR Item@1000 : Record 27;VAR NewItemLedgEntryErrBuf@1003 : Record 32);
    VAR
      Item2@1004 : Record 27;
      Window@1001 : Dialog;
    BEGIN
      WITH Item2 DO BEGIN
        COPY(Item);

        IF GETFILTER("Date Filter") <> '' THEN
          ERROR(Text000,FIELDCAPTION("Date Filter"));

        IF PostingDate = 0D THEN
          ERROR(Text001);

        IF (CalculatePer = CalculatePer::Item) AND (GETFILTER("Bin Filter") <> '') THEN
          ERROR(Text002,FIELDCAPTION("Bin Filter"));

        CheckCalculatePer(Item2);

        IF FIND('-') THEN BEGIN
          IF ShowDialog THEN
            Window.OPEN(Text004,"No.");
          REPEAT
            IF ShowDialog THEN
              Window.UPDATE(1,"No.");
            IF FindOpenOutboundEntry(Item2,GETFILTER("Location Filter"),GETFILTER("Variant Filter")) THEN
              ERROR(Text018,"No.",ItemLedgEntryErrBuf.TABLECAPTION);
            IF NOT Adjusted(Item2) THEN
              ERROR(
                Text007,
                ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Adjust Cost - Item Entries"));
          UNTIL NEXT = 0;
          IF ShowDialog THEN
            Window.CLOSE;
        END;
      END;

      ItemLedgEntryErrBuf.RESET;
      IF ItemLedgEntryErrBuf.FIND('-') THEN
        REPEAT
          NewItemLedgEntryErrBuf := ItemLedgEntryErrBuf;
          NewItemLedgEntryErrBuf.INSERT;
        UNTIL ItemLedgEntryErrBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE Adjusted@10(Item@1000 : Record 27) : Boolean;
    VAR
      AvgCostAdjmt@1002 : Record 5804;
    BEGIN
      IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
        AvgCostAdjmt.SETCURRENTKEY("Item No.","Cost Is Adjusted");
        AvgCostAdjmt.SETFILTER("Item No.",Item."No.");
        AvgCostAdjmt.SETRANGE("Cost Is Adjusted",FALSE);
        AvgCostAdjmt.SETRANGE("Valuation Date",0D,PostingDate);
        IF AvgCostAdjmt.FIND('-') THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCompletelyInvoiced@12(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETCURRENTKEY("Item No.",Positive);
        SETRANGE("Item No.",ItemNo);
        SETRANGE(Positive,FALSE);
        IF FIND('-') THEN
          REPEAT
            IF NOT "Completely Invoiced" AND ("Posting Date" IN [0D..PostingDate]) THEN
              InsertInErrBuf(ItemLedgEntry);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckCalculatePer@6(VAR Item@1000 : Record 27);
    VAR
      Item2@1001 : Record 27;
    BEGIN
      WITH Item2 DO BEGIN
        COPYFILTERS(Item);

        IF GETFILTER("Costing Method") <> '' THEN
          SETFILTER("Costing Method",STRSUBSTNO('%1&%2',GETFILTER("Costing Method"),"Costing Method"::Average))
        ELSE
          SETRANGE("Costing Method","Costing Method"::Average);

        IF FIND('-') THEN
          CASE CalculatePer OF
            CalculatePer::"Item Ledger Entry":
              ERROR(
                Text009,
                FIELDCAPTION("Costing Method"),"Costing Method");
            CalculatePer::Item:
              BEGIN
                IF InvtSetup."Average Cost Calc. Type" = InvtSetup."Average Cost Calc. Type"::Item THEN BEGIN
                  IF GETFILTER("Location Filter") <> '' THEN
                    ERROR(
                      Text011,
                      FIELDCAPTION("Location Filter"),FIELDCAPTION("Costing Method"),"Costing Method",
                      InvtSetup.FIELDCAPTION("Average Cost Calc. Type"),
                      InvtSetup."Average Cost Calc. Type",InvtSetup.TABLECAPTION);
                  IF GETFILTER("Variant Filter") <> '' THEN
                    ERROR(
                      Text011,
                      FIELDCAPTION("Variant Filter"),FIELDCAPTION("Costing Method"),"Costing Method",
                      InvtSetup.FIELDCAPTION("Average Cost Calc. Type"),
                      InvtSetup."Average Cost Calc. Type",InvtSetup.TABLECAPTION);
                  IF ByLocation THEN
                    ERROR(
                      Text012 +
                      Text013,
                      FIELDCAPTION("Costing Method"),"Costing Method",
                      InvtSetup.FIELDCAPTION("Average Cost Calc. Type"),
                      InvtSetup."Average Cost Calc. Type",InvtSetup.TABLECAPTION);
                  IF ByVariant THEN
                    ERROR(
                      Text014 +
                      Text013,
                      FIELDCAPTION("Costing Method"),"Costing Method",
                      InvtSetup.FIELDCAPTION("Average Cost Calc. Type"),
                      InvtSetup."Average Cost Calc. Type",InvtSetup.TABLECAPTION);
                END ELSE
                  IF ((GETFILTER("Location Filter") = '') AND (NOT ByLocation)) OR
                     ((GETFILTER("Variant Filter") = '') AND (NOT ByVariant))
                  THEN
                    ERROR(
                      Text015 +
                      Text016 +
                      Text017,
                      FIELDCAPTION("Location Filter"),FIELDCAPTION("Variant Filter"),FIELDCAPTION("Costing Method"),
                      "Costing Method",InvtSetup.FIELDCAPTION("Average Cost Calc. Type"),
                      InvtSetup."Average Cost Calc. Type",InvtSetup.TABLECAPTION);
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE InsertInErrBuf@2(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        IF NOT LogErrors THEN
          TESTFIELD("Completely Invoiced",TRUE);
        ItemLedgEntryErrBuf := ItemLedgEntry;
        IF ItemLedgEntryErrBuf.INSERT THEN;
      END;
    END;

    PROCEDURE FindOpenOutboundEntry@1102601000(Item@1102601001 : Record 27;LocationCode@1102601002 : Code[10];VariantCode@1102601003 : Code[10]) : Boolean;
    VAR
      ItemLedgEntry@1102601000 : Record 32;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      IF (VariantCode <> '') THEN
        ItemLedgEntry.SETRANGE("Variant Code",VariantCode);
      ItemLedgEntry.SETRANGE(Positive,FALSE);
      IF (LocationCode <> '') THEN
        ItemLedgEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgEntry.SETRANGE("Posting Date",0D,PostingDate);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}

